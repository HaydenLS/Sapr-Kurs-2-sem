String.h:
```
#pragma once
#define N 5

class String
{
	char str[N];
	int len = N;
public:
	//Constructors
	String(int len=N);
	~String();

	//Getters
	int GetLen();
	char GetElem(int index);

	//Setters
	void SetElem(char elem, int index);
	void SetLen(int newlen);


	//Methods
	void Clear();

};

```

String.cpp:
```
#include "String.h"

String::String(int len): len(len)
{

}

String::~String()
{
}

int String::GetLen()
{
	return len;
}

char String::GetElem(int index)
{
	if (index < len)
		return str[index];
	return 0;
}

void String::SetElem(char elem, int index)
{
	if (index < len)
		str[index] = elem;
}

void String::SetLen(int newlen)
{
	if (newlen > N)
		len = N;
	else
		len = newlen;
}

void String::Clear()
{
	for (int i = 0; i < len; i++)
	{
		str[i] = '\0';
	}
	len = N;
}

```

NodeH.h:
```
#pragma once
#include "String.h"

class NodeH
{
public:
	String elem;
	NodeH* strPrev;
	NodeH* strNext;


	NodeH(String& str, NodeH* strPrev=nullptr, NodeH* strNext=nullptr);
	~NodeH();
};

```

NodeH.cpp:
```
#include "NodeH.h"

NodeH::NodeH(String& str, NodeH* strPrev, NodeH* strNext)
{
	this->elem = str;
	this->strPrev = strPrev;
	this->strNext = strNext;
}

NodeH::~NodeH()
{
}

```

ListH.h:
```
#pragma once
#include "NodeH.h"
class ListH
{
public:
	NodeH* head;
	NodeH* cur;
	NodeH* last;
	int size = 0;


	ListH();
	void push_backH(String& str);
	void copyList(ListH& lst);
	void pop(int n);
	~ListH();

};


```

ListH.cpp:
```
#include "ListH.h"

ListH::ListH()
{
	head = cur = last = nullptr;
	size = 0;
}

void ListH::push_backH(String& str)
{
	if (head == nullptr)
	{
		head = new NodeH(str);
		last = head;
		size++;
	}
	else
	{
		NodeH* elem = new NodeH(str, last);
		last->strNext = elem;
		last = elem;
		size++;
	}
}


void ListH::copyList(ListH& lst)
{
	if (lst.size != 0)
	{
		lst.cur = lst.head;
		while (lst.cur!=nullptr)
		{
			this->push_backH(lst.cur->elem);
			lst.cur = lst.cur->strNext;
		}
	}
}

void ListH::pop(int n) // Удаление элемента по номеру
{
	cur = head;
	// Доходим до нужного элемента
	for (int i = 0; i < n - 1; i++)
	{
		cur = cur->strNext;
	}

	// Переадресацию указателей
	if (cur != head)
		cur->strPrev->strNext = cur->strNext;
	else
		head = cur->strNext;
	if (cur != last)
		cur->strNext->strPrev = cur->strPrev;
	else
		last = cur->strPrev;


	delete cur;
	size--;
	
}
ListH::~ListH()
{
	if (size != 0)
	{
		cur = head;
		while (cur!=nullptr)
		{
			NodeH* tmp = cur->strNext;
			delete cur;
			cur = tmp;
		}
	}
	head = cur = last = nullptr;
	size = 0;
}

```

Метод сложения двух списков:


```
bool Addition(ListH& l1, ListH& l2, ListH& lRes, ofstream& f)
{


	// Узнаем размер каждой строки и выделяем память.
	int size1, int size2;
	// Вычитаем из возможного количества элементы, которые не заняты в последнем списке, т.о. получили размер.
	size1 = l1.size * N - (N - l1.last->elem.GetLen());
	size2 = l1.size * N - (N - l1.last->elem.GetLen());
	

	

	return true;
}
```
